-SQL Server is a relational database management system (RDBMS) developed by Microsoft

sql servers
1.SQL Server Enterprise: It is used in the high end
2.SQL Server Standard: Itis suitable for Mid-Tier Application

practiced queries

1.select * from sys.tables - for displaying all tables in database

//for udating column
2.select * from DimAccount
update DimAccount SET AccountType='savings' where AccountKey=1

//create data base using query
 Create database <Database Name>

//renaming database
Alter database DatabaseName Modify Name = NewDatabaseName

//to delete or drop database
Drop Database DatabaseThatYouWantToDrop

#STATEMENTS
DCL (2 commands- Grant, Revoke)
TCL (3 commands- commit, rollback, savepoint)
DML - (3 commands- Insert, Update, Delete).
#DDL - DDL statements are used to alter/modify a database or table structure
HAS 5 COMMANDS
1.ALTER-This command is used to change or modify the structure of a table.
#USES
-Increase/decrease the width of a column - ALTER TABLE TABLENAME ALTER COLUMN Name VARCHAR(100) 

-Change the data type of a column-ALTER TABLE TABLENAME ALTER COLUMN Name NVARCHAR(100)

-Change the NOT NULL to NULL or NULL to NOT NULL-ALTER TABLE TABLENAME ALTER COLUMN No INT NOT NULL/ALTER TABLE Student ALTER COLUMN No INT NULL

-Used to add a new column to an existing table-ALTER TABLE <TABLENAME> ADD <NEWCOLUMNNAME> <DATA TYPE>[NEW SIZE]


-Used to drop/DELETE an existing column - ALTER TABLE <TABLENAME> DROP COLUMN <COLUMNNAME>

-We can add a new constraint.
-It can drop an existing constraint on a table.
-Disable or re-enable check constraint of a table.
-Changing a column name in the table.

2.RENAME-SP_RENAME ‘<TABLE NAME>.<OLD COLUMN NAME>’, ‘NEW COLUMN NAME’
EX:SP_RENAME ‘Student.Name’, ‘StudentName‘

EX:RENAMIG OLD TABLE TO NEW TABLE
SP_RENAME ‘Student‘, ‘StudentDetails’



3.CREATE - USED TO CFREATE A TABLE

4.DROP -DROP TABLE Student(DELETS TABLE FROM DATABASE)

5.TRUNCATE-
TRUNCATE TABLE Student

Note: The truncate command will delete rows but not the structure of the table.

##CREATING TABLE

CREATE TABLE TABLENAME
(
COLUMNNAME DATATYPE SIZE,
)

FOR STRING DATATYPE - VARCHAR
SALARY- DECIMAL

EXAMPLE: CREATE TABLE EMployee 
         ( 
          EMployee INT, 
          Ename  VARCHAR(max), 
          salary DECIMAL(6, 2) 
          ) 

19/10/22

The SQL SELECT Statement
The SELECT statement is used to select data from a database.

The data returned is stored in a result table, called the result-set.

--QUERY FOR CREATING A TABLE

create table StudentDetails
(
sname VARCHAR(MAX),
stdid INT
)

---
SELECT SYNTAX

SELECT column1, column2, ...
FROM table_name;

-WHERE CLASS SYNTAX - 
SELECT column1, column2, ...
FROM table_name
WHERE condition;

--OPERATORS----
AND OPERATOR SYNTAX
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

#OR SYNTAX

SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

NOT Syntax
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

LIKE Syntax
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;

-IN Operator
 The IN operator allows you to specify multiple values in a WHERE clause.

The IN operator is a shorthand for multiple OR conditions.

IN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

-BETWEEN Syntax

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;
----------------

 -ORDER BY Keyword
  The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC

-INSER INTO syntax
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

-UPDATE SYNTAX

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

#20/10/22
-SQL JOIN
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

INNER JOIN : Returns only matching Rows from the tables and elimnates unmatching rows

Syntax:
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

- RIGHT JOIN 
The RIGHT JOIN  returns all records from the right table (table2), and the matching records from the left table (table1). 
The result is 0 records from the left side, if there is no match.

RIGHT JOIN Syntax
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

-- LEFT JOIN 
  The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). 
  The result is 0 records from the right side, if there is no match.

LEFT JOIN Syntax
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;


create table StudentDetails1
(
stdGender varchar(9),
USN INT,
CLGNAME VARCHAR(10),
)

INSERT INTO StudentDetails1 VALUES('MALE',4363145,'KBN')
INSERT INTO StudentDetails1 VALUES('MALE',854544,'OXFORD')
INSERT INTO StudentDetails1 VALUES('MALE',965411,'RVMC')