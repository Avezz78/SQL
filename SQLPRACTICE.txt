-SQL Server is a relational database management system (RDBMS) developed by Microsoft

sql servers
1.SQL Server Enterprise: It is used in the high end
2.SQL Server Standard: Itis suitable for Mid-Tier Application

practiced queries

1.select * from sys.tables - for displaying all tables in database

//for udating column
2.select * from DimAccount
update DimAccount SET AccountType='savings' where AccountKey=1

//create data base using query
 Create database <Database Name>

//renaming database
Alter database DatabaseName Modify Name = NewDatabaseName

//to delete or drop database
Drop Database DatabaseThatYouWantToDrop

#STATEMENTS
DCL (2 commands- Grant, Revoke)
TCL (3 commands- commit, rollback, savepoint)
DML - (3 commands- Insert, Update, Delete).
#DDL - DDL statements are used to alter/modify a database or table structure
HAS 5 COMMANDS
1.ALTER-This command is used to change or modify the structure of a table.
#USES
-Increase/decrease the width of a column - ALTER TABLE TABLENAME ALTER COLUMN Name VARCHAR(100) 

-Change the data type of a column-ALTER TABLE TABLENAME ALTER COLUMN Name NVARCHAR(100)

-Change the NOT NULL to NULL or NULL to NOT NULL-ALTER TABLE TABLENAME ALTER COLUMN No INT NOT NULL/ALTER TABLE Student ALTER COLUMN No INT NULL

-Used to add a new column to an existing table-ALTER TABLE <TABLENAME> ADD <NEWCOLUMNNAME> <DATA TYPE>[NEW SIZE]


-Used to drop/DELETE an existing column - ALTER TABLE <TABLENAME> DROP COLUMN <COLUMNNAME>

-We can add a new constraint.
-It can drop an existing constraint on a table.
-Disable or re-enable check constraint of a table.
-Changing a column name in the table.

2.RENAME-SP_RENAME ‘<TABLE NAME>.<OLD COLUMN NAME>’, ‘NEW COLUMN NAME’
EX:SP_RENAME ‘Student.Name’, ‘StudentName‘

EX:RENAMIG OLD TABLE TO NEW TABLE
SP_RENAME ‘Student‘, ‘StudentDetails’



3.CREATE - USED TO CFREATE A TABLE

4.DROP -DROP TABLE Student(DELETS TABLE FROM DATABASE)

5.TRUNCATE-
TRUNCATE TABLE Student

Note: The truncate command will delete rows but not the structure of the table.

##CREATING TABLE

CREATE TABLE TABLENAME
(
COLUMNNAME DATATYPE SIZE,
)

FOR STRING DATATYPE - VARCHAR
SALARY- DECIMAL

EXAMPLE: CREATE TABLE EMployee 
         ( 
          EMployee INT, 
          Ename  VARCHAR(max), 
          salary DECIMAL(6, 2) 
          ) 

19/10/22

The SQL SELECT Statement
The SELECT statement is used to select data from a database.

The data returned is stored in a result table, called the result-set.

--QUERY FOR CREATING A TABLE

create table StudentDetails
(
sname VARCHAR(MAX),
stdid INT
)

---
SELECT SYNTAX

SELECT column1, column2, ...
FROM table_name;

-WHERE CLASS SYNTAX - 
SELECT column1, column2, ...
FROM table_name
WHERE condition;

--OPERATORS----
AND OPERATOR SYNTAX
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

#OR SYNTAX

SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

NOT Syntax
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

LIKE Syntax
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;

-IN Operator
 The IN operator allows you to specify multiple values in a WHERE clause.

The IN operator is a shorthand for multiple OR conditions.

IN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

-BETWEEN Syntax

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;
----------------

 -ORDER BY Keyword
  The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC

-INSER INTO syntax
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

-UPDATE SYNTAX

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

#20/10/22
-SQL JOIN
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

INNER JOIN : Returns only matching Rows from the tables and elimnates unmatching rows

Syntax:
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

- RIGHT JOIN 
The RIGHT JOIN  returns all records from the right table (table2), and the matching records from the left table (table1). 
The result is 0 records from the left side, if there is no match.

RIGHT JOIN Syntax
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

-- LEFT JOIN 
  The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). 
  The result is 0 records from the right side, if there is no match.

LEFT JOIN Syntax
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;


create table StudentDetails1
(
stdGender varchar(9),
USN INT,
CLGNAME VARCHAR(10),
)

INSERT INTO StudentDetails1 VALUES('MALE',4363145,'KBN')
INSERT INTO StudentDetails1 VALUES('MALE',854544,'OXFORD')
INSERT INTO StudentDetails1 VALUES('MALE',965411,'RVMC')

#21-10-22

-Attended session on clauses group by,order by

#26-10-22

-Attended session on Joins
-practiced joining tables 

#clauses

1)order by clause - sorting the data either in ascending or descending order of a query based on a specified column or list of columns.

-SYNTAX: SELECT expressions FROM tables [WHERE conditions] ORDER BY expression [ASC | DESC];
  
2)group by clause- used to divide similar types of records or data as a group and then return. If we use group by clause in the query, 
 then we should use grouping/aggregate function such as count(), sum(), max(), min(), and avg() functions.
-syntax:
  SELECT expression1, expression2, expression_n, 
      aggregate_function (expression)
      FROM tables
       [WHERE conditions]
        GROUP BY expression1, expression2, expression_n;

-practiced self join query

(created one table below)
CREATE TABLE EMPLOYEDETAILS
(
EMPID INT,
ENAME VARCHAR(10),
MANAGERID INT
)

(inserting values into it)
INSERT INTO EMPLOYEDETAILS VALUES(1,'JOHN',3)
INSERT INTO EMPLOYEDETAILS VALUES(2,'TOM',1)
INSERT INTO EMPLOYEDETAILS VALUES(3,'JACK',1)
INSERT INTO EMPLOYEDETAILS VALUES(4,'SMITH',2)
INSERT INTO EMPLOYEDETAILS VALUES(5,'JOHNNY',1)

SELECT * FROM EMPLOYEDETAILS

(joining table to itself using alias)
SELECT E.ENAME AS EMPLOYE,M.ENAME AS MANAGER
FROM EMPLOYEDETAILS E
LEFT JOIN EMPLOYEDETAILS M
ON E.MANAGERID=M.EMPID

#27-10-22

-foreign key syntax - foreign key (columnName) REFERENCES table2(columnname)
-use - prevents invalid data to b inserted or updated, values should match in the primary key column orelse error

-select * from sys.procedures - for seeing all sp present in database
-functions - contains a set of sql statements to perform specefic task
-scalar func - returns a single value
-inline func - 

CASE STATEMENT WORKS AS IF ELSE IN SQL

WEN U WANT TO DEFN OF VIEW - SP_HELPTEXT 'VIEWNAME'
WEN U WANT TO DEFN OF TABLE = SP_HELP

SELECT * FRO SYS.OBJECTS- 

FOR PROCEDURE - BROWNISH COLOUR

WE CAN CALL FUNCTION IN STORED PROCEDURE
WE CANT CALL STORED PROCEDURE IN FUNCTION

-- STORED PROCEDURES
A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.

So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.

You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.

Stored Procedure Syntax :
CREATE PROCEDURE procedure_name
AS
sql_statement
GO;

Execute a Stored Procedure:
EXEC procedure_name;

-Attended sessions on joins,stored procedures,views

#28-10-22

--INDEXERS: The goal of the index is to make the search operation faster.
-Indexes make the search operation faster by creating something called a B-Tree (Balanced Tree) structure internally.

--The Clustered Index: in SQL Server defines the order in which the data is physically stored in a table.
  In the case of a clustered index,  the leaf node store the actual data.
  As the leaf nodes store the actual data a table can have only one clustered index.
  The Clustered Index by default was created when we created the primary key constraint for that table.
  that means the primary key column creates a clustered index by default.

-- NON-CLUSTERED INDEX :In SQL Server Non-Clustered Index, the arrangement of data in the index table will be different
   From the arrangement of data in the actual table.The data is stored in one place and the index is stored in another place
   Moreover, the index will have pointers to the storage location of the actual data.

--The following commands are used to control transactions.

COMMIT − to save the changes.
syntax:COMMIT;

ROLLBACK − to roll back the changes.This command can only be used to undo transactions
syntax:ROLLBACK;

SAVEPOINT − creates points within the groups of transactions in which to ROLLBACK.

SET TRANSACTION − Places a name on a transaction.

31/10/22 -- have gone through functions
--- Built-In Functions?
In SQL Server a built-in function is a piece of code that takes one or more inputs and returns a value.  An example of a built-in function is ABS(), which when given a value calculates the absolute (non-negative) value of the number.

Note: SQL built-in functions may or may not take parameters but always returns a value.

There are several built-in functions available in SQL Server. In this article, we will discuss the most common use of built-in string functions in SQL Server.

ASCII(Character_Expression)
The ASCII function returns the ASCII code that represents a specific character.
To find the ASCII Code of the capital letter ‘A’

Example: Select ASCII(‘A’)

Output: 65

---CHAR(Integer_Expression)
   This function converts an integer ASCII code to a character. That means the CHAR function does the opposite of the ASCII function. The Integer_Expression should be between 0 and 255.

Printing uppercase alphabets using CHAR() function:
DECLARE @Number int
SET @Number = 65
WHILE(@Number <= 90)
BEGIN
  PRINT CHAR(@Number)
  SET @Number = @Number + 1
END
Note: The while loop will become an infinite loop if you forget to include the following line.

--LTRIM(Character_Expression)
This function returns a character expression after it removes the leading blanks. That means it removes blanks on the left-hand side of the given character expression.

Example: Removing the 3 white spaces on the left-hand side of the ‘   Hello’ string using LTRIM() function.

Select LTRIM(‘   Hello’)

Output: Hello

--RTRIM(Character_Expression)
This function returns a character string after truncating all trailing blanks. That means it removes blanks on the right-hand side of the given character expression.

Example: Removing the 3 white spaces on the left-hand side of the ‘Hello   ‘ string using RTRIM() function.

Select RTRIM(‘Hello   ‘)

Output: Hello


--REVERSE(‘Any_String_Expression’)
This function returns the reverse of a character expression. That means it reverses all the characters in the given string expression.

Example: Select REVERSE(‘ABCDEFGHIJKLMNOPQRSTUVWXYZ’)
Output: ZYXWVUTSRQPONMLKJIHGFEDCBA

LEN(String_Expression)
This function returns the number of characters, instead of the number of bytes, of the specified string expression, excluding trailing blanks. That means it returns the count of total characters in the given string expression, excluding the blanks at the end of the expression.

Example: Select LEN(‘ Functions   ‘)

Output: 10

--LEFT(Character_Expression, Integer_Expression)
  This function returns the left part of a character string with the specified number of characters. That means it returns the specified number of characters from the left-hand side of the given character expression.
  Example: Select LEFT(‘ABCDE’, 3)
   Output: ABC

--CHARINDEX(‘Expression_To_Find’, ‘Expression_To_Search’, ‘Start_Location’)
   This function returns the starting position of the specified expression in a character string. The Start_Location parameter is optional.

Example: In this example, we get the starting position of ‘@’ character in the email string ‘sara@aaa.com’. 

Select CHARINDEX(‘@’,’hina@aaa.com’,1)
Output: 5

--SUBSTRING(‘expression’, ‘Start’, ‘Length’)
  As the name, suggests, this function returns substring (part of the string), from the given expression. You specify the starting location using the ‘start’ parameter and the number of characters in the substring using the ‘Length’ parameter. All 3 parameters are mandatory.

Example: Display just the domain part of the given email ‘info@dotnettutorials.net’.

Select SUBSTRING(‘info@dotnettutorials.net’,6, 19)

Output: dotnettutorials.net